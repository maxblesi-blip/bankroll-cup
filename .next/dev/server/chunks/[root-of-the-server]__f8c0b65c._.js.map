{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/M%C3%A4%C3%A4%C3%A4x/bankroll-cup/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport DiscordProvider from \"next-auth/providers/discord\";\n\n// Cache f√ºr Rollen\nconst roleCache = new Map<string, { role: string; timestamp: number }>();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 Minuten\n\nconst getCachedRole = (userId: string): string | null => {\n  const cached = roleCache.get(userId);\n  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\n    return cached.role;\n  }\n  roleCache.delete(userId);\n  return null;\n};\n\nconst setCachedRole = (userId: string, role: string): void => {\n  roleCache.set(userId, { role, timestamp: Date.now() });\n};\n\nconst fetchUserRole = async (userId: string): Promise<string> => {\n  const cachedRole = getCachedRole(userId);\n  if (cachedRole) {\n    console.log(`‚úÖ [CACHE HIT] Role f√ºr ${userId}: ${cachedRole}`);\n    return cachedRole;\n  }\n\n  if (!userId) {\n    console.error(\"‚ùå [ERROR] Keine User ID vorhanden\");\n    return \"player\";\n  }\n\n  const discordToken = process.env.DISCORD_TOKEN;\n  const serverId = process.env.DISCORD_SERVER_ID;\n\n  if (!discordToken) {\n    console.error(\"‚ùå [ERROR] DISCORD_TOKEN nicht in .env.local gesetzt!\");\n    return \"player\";\n  }\n\n  if (!serverId) {\n    console.error(\"‚ùå [ERROR] DISCORD_SERVER_ID nicht in .env.local gesetzt!\");\n    return \"player\";\n  }\n\n  try {\n    console.log(`üîç [FETCH] Hole Rollen f√ºr Discord User: ${userId}`);\n    console.log(`üîç [FETCH] Server ID: ${serverId}`);\n\n    const response = await fetch(\n      `https://discord.com/api/v10/guilds/${serverId}/members/${userId}`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bot ${discordToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    if (!response.ok) {\n      console.error(\n        `‚ùå [DISCORD API] Status: ${response.status} ${response.statusText}`\n      );\n\n      if (response.status === 401) {\n        console.error(\"‚ùå [ERROR] Bot Token ung√ºltig oder abgelaufen!\");\n      } else if (response.status === 403) {\n        console.error(\"‚ùå [ERROR] Bot hat keine Permissions im Server!\");\n      } else if (response.status === 404) {\n        console.error(\n          `‚ùå [ERROR] User ${userId} nicht im Server oder nicht gefunden!`\n        );\n      }\n\n      return \"player\";\n    }\n\n    const member = await response.json();\n    const roleIds = member.roles || [];\n\n    console.log(`üìã [ROLES] User ${userId} hat Role IDs:`, roleIds);\n\n    const adminRoleId = process.env.ADMIN_ROLE_ID;\n    const modRoleId = process.env.MOD_ROLE_ID;\n    const playerRoleId = process.env.PLAYER_ROLE_ID;\n\n    console.log(`üè∑Ô∏è  [CONFIG] ADMIN_ROLE_ID: ${adminRoleId}`);\n    console.log(`üè∑Ô∏è  [CONFIG] MOD_ROLE_ID: ${modRoleId}`);\n    console.log(`üè∑Ô∏è  [CONFIG] PLAYER_ROLE_ID: ${playerRoleId}`);\n\n    let role = \"player\";\n\n    if (adminRoleId && roleIds.includes(adminRoleId)) {\n      role = \"admin\";\n      console.log(`üü¢ [RESULT] User ${userId} ‚Üí ADMIN`);\n    } else if (modRoleId && roleIds.includes(modRoleId)) {\n      role = \"mod\";\n      console.log(`üü° [RESULT] User ${userId} ‚Üí MOD`);\n    } else if (playerRoleId && roleIds.includes(playerRoleId)) {\n      role = \"player\";\n      console.log(`üîµ [RESULT] User ${userId} ‚Üí PLAYER`);\n    } else {\n      console.warn(\n        `‚ö†Ô∏è  [RESULT] User ${userId} hat keine erkannte Rolle (Standard: PLAYER)`\n      );\n    }\n\n    setCachedRole(userId, role);\n    return role;\n  } catch (error) {\n    console.error(\"‚ùå [EXCEPTION] Role fetch error:\", error);\n    return \"player\";\n  }\n};\n\n// ============= GOOGLE SHEETS INTEGRATION =============\n\nasync function syncUserToSheets(\n  discordId: string,\n  discordUsername: string,\n  discordEmail: string\n): Promise<void> {\n  try {\n    console.log(`\\nüìä [SHEETS] Synce User zu Google Sheets...`);\n    console.log(`   Discord ID: ${discordId}`);\n    console.log(`   Username: ${discordUsername}`);\n    console.log(`   Email: ${discordEmail}`);\n\n    // Rufe Sync API auf (auf dem Server, nicht im Client)\n    const response = await fetch(\n      `${process.env.NEXTAUTH_URL || \"http://localhost:3000\"}/api/sync-user`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          discordId,\n          discordUsername,\n          discordEmail,\n        }),\n      }\n    );\n\n    if (response.ok) {\n      console.log(`‚úÖ [SHEETS] User erfolgreich synchronisiert`);\n    } else {\n      console.error(\n        `‚ö†Ô∏è  [SHEETS] Sync API Error: ${response.status}`\n      );\n    }\n  } catch (error) {\n    console.error(\"‚ùå [SHEETS] Sync Error:\", error);\n    // Fehler nicht kritisch - App funktioniert auch ohne Sheets Sync\n  }\n}\n\n// ============= NEXTAUTH KONFIGURATION =============\n\nconst handler = NextAuth({\n  providers: [\n    DiscordProvider({\n      clientId: process.env.DISCORD_CLIENT_ID || \"\",\n      clientSecret: process.env.DISCORD_CLIENT_SECRET || \"\",\n      allowDangerousEmailAccountLinking: true,\n      // Wichtige Scopes f√ºr Email und Guilds\n      authorization: {\n        params: {\n          scope: \"identify email guilds\",\n        },\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 Tage\n  },\n  callbacks: {\n    async jwt({ token, account, profile }) {\n      // Initial Login: Discord ID und Daten speichern\n      if (account?.provider === \"discord\" && profile?.id) {\n        token.discordId = profile.id;\n        token.discordUsername = profile.username;\n        token.discordEmail = profile.email;\n        token.discordImage = profile.image;\n\n        console.log(`üìù [JWT] Discord Profile gespeichert:`);\n        console.log(`   ID: ${profile.id}`);\n        console.log(`   Username: ${profile.username}`);\n        console.log(`   Email: ${profile.email}`);\n\n        // ‚úÖ Synce zu Google Sheets\n        await syncUserToSheets(\n          profile.id,\n          profile.username || \"\",\n          profile.email || \"\"\n        );\n      }\n\n      // Username aktualisieren\n      if (profile?.username || profile?.name) {\n        token.name = profile.username || profile.name;\n      }\n\n      // Role beim Login oder nach Cache-Ablauf laden\n      const discordId = token.discordId as string;\n      if (discordId) {\n        const lastRoleCheck = (token.lastRoleCheck as number) || 0;\n        const timeSinceCheck = Date.now() - lastRoleCheck;\n\n        if (!token.role || timeSinceCheck > CACHE_TTL) {\n          console.log(\n            `‚ôªÔ∏è  [JWT] Aktualisiere Rollen (${timeSinceCheck}ms seit letztem Check)`\n          );\n          const role = await fetchUserRole(discordId);\n          token.role = role;\n          token.lastRoleCheck = Date.now();\n        } else {\n          console.log(\n            `‚è≠Ô∏è  [JWT] Role noch g√ºltig (${Math.round(timeSinceCheck / 1000)}s alt)`\n          );\n        }\n      }\n\n      return token;\n    },\n\n    async session({ session, token }) {\n      if (session.user) {\n        (session.user as any).id = token.discordId;\n        (session.user as any).role = token.role || \"player\";\n        // ‚úÖ F√ºge Discord Daten hinzu\n        (session.user as any).discordId = token.discordId;\n        (session.user as any).discordEmail = token.discordEmail;\n        (session.user as any).discordUsername = token.discordUsername;\n\n        // Setze Email\n        if (token.discordEmail) {\n          session.user.email = token.discordEmail as string;\n        }\n\n        // Setze Image\n        if (token.discordImage) {\n          session.user.image = token.discordImage as string;\n        }\n\n        console.log(\n          `‚úÖ [SESSION] Benutzer: ${token.name} | Rolle: ${token.role} | Discord ID: ${token.discordId}`\n        );\n      }\n      return session;\n    },\n  },\n\n  secret: process.env.NEXTAUTH_SECRET,\n  pages: {\n    error: \"/auth/error\",\n  },\n});\n\nexport { handler as GET, handler as POST };"],"names":[],"mappings":"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","debugId":null}}]
}